1. Scanner 
	  - Fakes and Mocks. 
		- Behavior Verification
		- Most of the methods of a mock implementation do nothing or just store values in local 	
			collections.
			
		References: 
		
		Working Effectively with Legacy Code
		Unit Testing with Mock Objects
		
2. UnCommenter 
		- Illustrates using Ruby builtin StringIO as a Fake object.
 		- State Verification
	  
	 Reference: The Well Grounded Rubyist

3. Canonical 
		- Canonical test structure practice for Given, When, Then.
		- Given - Precondition
		- When  - Exercise the SUT
		- Then  - Postcondition
		- State Verification

4. Meszaros 
		- How to eliminate loops in specs. Data driven spec and repeat methods are
 	    available in meszaros gem.
		- How do we choose what data to test? 0, 1 and n
		- One to Many

5. Ruby Extensions 
		- How to open classes that preserves the semantics of the core classes.
	 	- What to do when the test passes without failing the first time.
		- Intention revealing variable names.
		- Minimizing the semantic gap between domain and the code.
		- Semantic Gap. Self evident, Obvious, Self-Explanatory. Donâ€™t Make Me Think.
		- State Verification

6. Angry Rock
		- How to fix Command Query Separation violation?
		- Refactoring : Retaining the old interface and the new one at the same time to avoid old
		  tests from failing
    - Semantic quirkiness of Well Grounded Rubyist solution exposed by specs.
		- Hiding implementation related classes. (AngryRock::Internal module)

7. Tautology
		- How to mock yourself out.

8. Rock 
	  - Rock, paper, scissors game
    - How to use double dispatch and make your code object oriented.
		- Exercise: Replace angry rock gem internal implementation with the double dispatch solution.

9. Fibonacci
		- Common interview question
		- Learn recursive solution and optimize the execution by using non-recursive solution
		- Focus on getting it to work first, cleanup by refactoring and then focus on optimization
		- When refactoring, start green and end in green. Why? To avoid violating definition of
		  refactoring.
		- Using existing tests as regression tests when making major changes to existing code.
		- State Verification
		
10. Factorial
	 	- Factorial and Fibonacci demo screencast
		- Factorial and Fibonacci are example for : Examples --> Specs --> Requirements slide. 
		- Illustrates Direct Input and Direct Output.
		- State Verification
		
11. Bowling Game
		- Demo screencast
		- Using domain specific term and eliminating implementation details in the spec.
		- Focus on the 'What' instead of 'How'. Declarative vs Imperative.
		- Fake it till you make it.
		- Do you always need to take small steps when writing tests?
		- State Verification
		
12. Role
		- Being minimal when implementing the production code.

13. Bowling Game Gem
	  - miss() method implementation helped to setup the require statements and get the spec working.
		- When to delete tests?
		- Private methods are not tested. Why?
		- BDD style tests read like sentences in a specification. 
		- Scoring description and examples were translated to specs.

14. twits
		- Dealing with third party API.
		- Thin adapter layer to insulate your application from external API.
		- What abusing mocks looks like
		- Brittle tests that break even when the behavior does not change caused by mock abuse
		- Integration tests should test the layer that interacts with external API.
		- Using too many mocks indicate badly designed API. So called fluent interface is actually
		  a train wreck. Fluent interface is ok for languages like Java where it is the only option.

15. Week
	  - Introduction to Contract tests. How to write? 
		- Contract tests explicitly documents the behavior of the API for invalid inputs.
		  Hash#fetch throws exception that is implicit in the code.
		- Reliable test : Test breaks when the code changes the return value to blank string from
		 	nil. Test fails when it should. This is good.

16. Guess
    - How to test random behavior
    - Illustrates the use of as_null_object
		- Illustrates the inverting dependencies
		- How to make your code depend on abstractions instead of concretions
		- Illustrates single responsibility principle
		- Illustrates programming to an interface not to an implementation
		- When to use partial stub on a real object is illustrated by spec 7 and 8
		
TODO:

1. Realistic example of Open Closed Principle
2. Triangulation. Example. Multi-currency stock report example from Kent Beck's book. 
3. Contract tests. How to write? When to use them?
4. Calculator kata	
5. Guilded rose Kata. Dealing with legacy code.
6. Conway's game of life game. Objective: To practice 'Do the simplest thing that could possibly work' by applying the four simple rules:

		1. Pass all tests.
		2. No duplication of behavior or configuration.
		3. Clear, expressive and consistent
				a) Do not put the implementation of unrelated ideas in the same method.
				b) Classes should organize ideas in a readily understandable way.
				c) Use appropriate names so you don't have to explain method, member or class names with
				   additional documentation
				d) Methods and classes should be implemented so they can be understood totally from their
				   public interfaces. This not only allows for up-front testing, but decreases coupling.
		4. Minimizes classes, modules and methods. This is a reminder to make the code simple
		 	 and concise.

7. Braintree example. Illustrate learning tests which become regression tests. 
8. Example of brittle test that breaks even when the behavior does not change. How to fix it?
   Brittleness due to over specification and how to avoid it?
9. Using too many mocks and stubs and what it implies about the design.
10. Passing flag into a method and how to fix it.
11. Single responsibility principle. No And, Or, or But.
12. Testing logic via UI and how to fix it.



