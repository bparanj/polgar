	1. How can we test if the scanner can scan a given item and display the item name and price on a cash register display?

Commit eea65809cf2301a030e802f0c66ee9d534d311ac assumes that we can access the last line item display by doing:

attr_reader :last_line_item

	Using this real object R2d2Display is also slow. Let's use a Fake object to speed up the test.
	
	2. Using fake object, the spec now runs fast. Dependency injection is used to create scanner object with a fake display.
	
	When we write tests, we have to divide and conquer. This test tells us how scanner objects affect displays. This test helps us to see whether a problem is due to scanner (Is scanner fulfilling its responsibility?). This helps us localize errors and save time.
	
	When we write tests for individual units, we end up with small well-understood pieces. This makes it easy to reason about code.
	
	3. Writing a lot of fakes can be tedious. In such cases, mocks can be used. Mock objects are fakes that perform assertions internally. The solution that uses mocks is faster than using Fake display object.
	
	4. Run the spec:
	
	rspec scanner/scanner_spec.rb --format doc --color
	
	Notes on Mock Objects
	
	A Mock Object is a substitute implementation to emulate or instrument other domain code. 
	It should be simpler than the real code, not duplicate its implementation, and allow you
	to set up private state to aid in testing. The emphasis in mock implementations is on 
	absolute simplicity, rather than completeness. For example, a mock collection class might
	always return the same results from an index method, regardless of the actual parameters. 
	We have found that a warning sign of a Mock Object becoming too complex is that it starts
	calling other Mock Objects – which might mean that the unit test is not sufficiently local.
	When using Mock Objects, only the unit test and the target domain code are real.
	
	Why use mock objects?
	
	- Deferring Infrastructure Choices
	- Lightweight emulation of required complex system state
	- On demand simulation of conditions
	- Interface Discovery
	- Loosely coupled design achieved via dependency injection
	
	A Pattern for Unit Testing
 
	 Create instances of Mock Objects
	
	· Set state in the Mock Objects
	· Set expectations in the Mock Objects
	· Invoke domain code with Mock Objects as parameters
	· Verify consistency in the Mock Objects
	
	With this style, the test makes clear what the domain code is expecting from its environment,
	in effect documenting its preconditions, postconditions, and intended use. All these aspects
	are defined in executable test code, next to the domain code to which they refer. We sometimes
	find that arguing over which objects to verify gives us better insight into a test and, hence,
	the	domain. In our experience, this style makes it easy for new readers to understand the unit
	tests as it reduces the amount of context they have to remember. We have also found that it is
	useful for demonstrating to new programmers how to write effective unit tests.
	
	Testing with Mock Objects improves domain code by preserving encapsulation, reducing global
	dependencies, and clarifying the interactions between classes.